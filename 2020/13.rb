require 'csv'
t = Time.now
d = CSV.parse(open("data.csv").read).flatten

s = d.first.to_i
bs = d[1..-1]

# N + 0   = 41  * p1
# N + 35  = 37  * p2
# N + 41  = 431 * p3
# N + 49  = 23  * p4
# N + 54  = 13  * p5
# N + 58  = 17  * p6
# N + 60  = 19  * p7
# N + 72  = 863 * p8
# N + 101 = 29  * p9


# N ≡ 0   mod 41
# N ≡ 2   mod 37
# N ≡ 390 mod 431
# N ≡ 20  mod 23
# N ≡ 11  mod 13
# N ≡ 10  mod 17
# N ≡ 16  mod 19
# N ≡ 791 mod 863
# N ≡ 15  mod 29



n = 41 * 37 * 431 * 23 * 13 * 17 * 19 * 863 * 29

n1 = 41
n1b = 37 * 431 * 23 * 13 * 17 * 19 * 863 * 29

e1 = 4 * n1b

n2 = 37
n2b = 41 * 431 * 23 * 13 * 17 * 19 * 863 * 29

e2 = 7 * n2b

n3 = 431
n3b = 41 * 37 * 23 * 13 * 17 * 19 * 863 * 29
e3 = 257 * n3b

n4 = 23
n4b = 41 * 37 * 431 * 13 * 17 * 19 * 863 * 29
e4 = 6 * n4b

n5 = 13
n5b = 41 * 37 * 431 * 23 * 17 * 19 * 863 * 29
e5 = 5 * n5b

n6 = 17
n6b = 41 * 37 * 431 * 23 * 13 * 19 * 863 * 29
e6 = 10 * n6b

n7 = 19
n7b = 41 * 37 * 431 * 23 * 13 * 17 * 863 * 29
e7 = 9 * n7b

n8 = 863
n8b = 41 * 37 * 431 * 23 * 13 * 17 * 19 * 29
e8 = 532 * n8b

n9 = 29
n9b = 41 * 37 * 431 * 23 * 13 * 17 * 19 * 863
e9 = 23 * n9b

as = [0,  2,  390, 20, 11, 10, 16, 791, 15]
es = [e1, e2, e3,  e4, e5, e6, e7, e8,  e9]

sum = 0
as.each_with_index do |a, i|
  sum += a * es[i]
end

p sum

p sum % n


return

# N + 0   = 41  * p1
# N + 35  = 37  * p2
# N + 41  = 431 * p3
# N + 49  = 23  * p4
# N + 54  = 13  * p5
# N + 58  = 17  * p6
# N + 60  = 19  * p7
# N + 72  = 863 * p8
# N + 101 = 29  * p9

i2 = 35 * 41 * 431 * 23 * 13 * 17 * 19 * 863 * 29
i3 = 41 * 41 * 37 * 23 * 13 * 17 * 19 * 863 * 29
i4 = 49 * 41 * 37 * 431 * 13 * 17 * 19 * 863 * 29
i5 = 54 * 41 * 37 * 431 * 23 * 17 * 19 * 863 * 29
i6 = 58 * 41 * 37 * 431 * 23 * 13 * 19 * 863 * 29
i7 = 60 * 41 * 37 * 431 * 23 * 13 * 17  * 863 * 29
i8 = 72 * 41 * 37 * 431 * 23 * 13 * 17 * 19 * 29
i9 = 101 * 41 * 37 * 431 * 23 * 13 * 17 * 19 * 863

k1 = 37 * 431 * 23 * 13 * 17 * 19 * 863 * 29
k2 = 41 * 431 * 23 * 13 * 17 * 19 * 863 * 29
k3 = 41 * 37 * 23 * 13 * 17 * 19 * 863 * 29
k4 = 41 * 37 * 431 * 13 * 17 * 19 * 863 * 29
k5 = 41 * 37 * 431 * 23 * 17 * 19 * 863 * 29
k6 = 41 * 37 * 431 * 23 * 13 * 19 * 863 * 29
k7 = 41 * 37 * 431 * 23 * 13 * 17 * 863 * 29
k8 = 41 * 37 * 431 * 23 * 13 * 17 * 19 * 29
k9 = 41 * 37 * 431 * 23 * 13 * 17 * 19 * 863

i = i2 + i3 + i4 + i5 + i6 + i7 + i8 + i9

k = k2 + k3 + k4 + k5 + k6 + k7 + k8 + k9

ks = 41 * 37 * 431 * 23 * 13 * 17 * 19 * 863 * 29



d = 1
while true
  c = 863 * d - 72
  p (c * ks - i) / k if (c * ks - i) % k == 0
  p "It took #{Time.now - t}s" if (c * ks - i) % k == 0
  return if (c * ks - i) % k == 0
  d += 1
  p c if c % 10000000 == 0
end

return

c = 1
w = false
until w
  d = 863 * c - 72
  # d  = 37 * x + 2
 # (d + 72) % 863 == 0
  w = true if d % 41 == 0 && (d + 35) % 37 == 0 && (d + 41) % 431 == 0 && (d + 49) % 23 == 0 && (d + 54) % 13 == 0 && (d + 58) % 17 == 0 && (d + 60) % 19 == 0 && (d + 72) % 863 == 0 && (d + 101) % 29 == 0
  c += 1
  p d if d % 10000000 == 0
end
p d

p "It took #{Time.now - t}s"

return

c = 1
win = false
until win
  d = 41 * c
  if (d + 35) % 37 == 0 && (d+41) % 431 == 0 && (d+49) % 23 == 0
    win = true
    bs.each_with_index do |b,i|
      unless b == 'x'
        win = false unless (d+i) %b.to_i   == 0
      end
    end
    p d if win
    p "count is #{d}" if d%100000 == 0
  end
  c += 1
end

p "It took #{Time.now - t}s"


# time + 0 = 41 x
# time + 35 = 37 n

# 1234100000
# 9274200000
# 4100000000
# 35260000000
# 468630000000
# 717910000000

# 717910000000

# 1049600000000

# 12830000000
# 168170000000
# 962130000000
# 1488560000000
# 2411970000000
# 100000000000000 MIN

# Part 1
# bss = bs.select{|x| x != 'x'}.map{|x| x.to_i}

# p s
# p bss

# res = []
# win = 0
# min = 0

# bss.each do |b|
#   t = s / b
#   res << t*b if s%b == 0
#   x = t*b if s%b == 0
#   res << (t+1)*b unless s%b == 0
#   x = (t+1)*b unless s%b == 0
#   win = b if res.min == x
#   min = x - s if res.min == x
# end

# p win
# p min
# p min * win




